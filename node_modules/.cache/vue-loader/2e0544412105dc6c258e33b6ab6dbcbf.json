{"remainingRequest":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mcsjourneys/Desktop/startup-frontend-main/src/views/menu/index.vue?vue&type=style&index=0&id=70f07688&rel=stylesheet%2Fscss&lang=scss","dependencies":[{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/src/views/menu/index.vue","mtime":1655109659000},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/css-loader/dist/cjs.js","mtime":1715598878831},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1715598879821},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/postcss-loader/src/index.js","mtime":1715598882466},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/sass-loader/dist/cjs.js","mtime":1715598879029},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/cache-loader/dist/cjs.js","mtime":1715598879413},{"path":"/Users/mcsjourneys/Desktop/startup-frontend-main/node_modules/vue-loader/lib/index.js","mtime":1715598879453}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYXZhdGFyIHsKICB3aWR0aDogMzJweDsKICBoZWlnaHQ6IDMycHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqbA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/menu","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!--工具栏-->\n    <div class=\"head-container\">\n      <!-- 搜索 -->\n      <el-input\n        v-model=\"name\"\n        size=\"small\"\n        clearable\n        placeholder=\"输入菜单名称搜索\"\n        style=\"width: 200px\"\n        class=\"filter-item\"\n        @keyup.enter.native=\"doQuery\"\n      />\n      <el-date-picker\n        v-model=\"createTime\"\n        :default-time=\"['00:00:00', '23:59:59']\"\n        type=\"daterange\"\n        range-separator=\":\"\n        size=\"small\"\n        class=\"date-item\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n        start-placeholder=\"开始日期\"\n        end-placeholder=\"结束日期\"\n      />\n      <el-button\n        class=\"filter-item\"\n        size=\"mini\"\n        type=\"success\"\n        icon=\"el-icon-search\"\n        @click=\"doQuery\"\n      >搜索</el-button>\n      <el-button\n        class=\"filter-item\"\n        size=\"mini\"\n        type=\"primary\"\n        icon=\"el-icon-document-add\"\n        @click=\"doAdd\"\n      >增加</el-button>\n      <el-button\n        class=\"filter-item\"\n        size=\"mini\"\n        type=\"danger\"\n        icon=\"el-icon-circle-plus-outline\"\n        :disabled=\"selections.length === 0\"\n        @click=\"doDelete\"\n      >删除{{ selections.length }}</el-button>\n    </div>\n\n    <el-row>\n      <!-- 表单渲染 -->\n      <el-dialog\n        append-to-body\n        :close-on-click-modal=\"false\"\n        :visible.sync=\"showDialog\"\n        width=\"620px\"\n      >\n        <el-form\n          ref=\"form\"\n          :inline=\"true\"\n          :model=\"form\"\n          :rules=\"rules\"\n          size=\"small\"\n          label-width=\"80px\"\n        >\n          <el-form-item label=\"菜单名称\" prop=\"name\">\n            <el-input v-model=\"form.name\" />\n          </el-form-item>\n          <el-form-item label=\"路由地址\" prop=\"path\">\n            <el-input\n              v-model=\"form.path\"\n              placeholder=\"根目录菜单需前置加斜杠/\"\n            />\n          </el-form-item>\n          <el-form-item label=\"组件路径\" prop=\"component\">\n            <el-input\n              v-model=\"form.component\"\n              placeholder=\"根目录菜单输入Layout\"\n            />\n          </el-form-item>\n          <el-form-item label=\"菜单排序\" prop=\"sort\">\n            <el-input-number\n              v-model.number=\"form.sort\"\n              :min=\"0\"\n              :max=\"999\"\n              controls-position=\"right\"\n              style=\"width: 185px\"\n            />\n          </el-form-item>\n          <el-form-item label=\"菜单图标\">\n            <el-popover\n              placement=\"bottom-start\"\n              width=\"450\"\n              trigger=\"click\"\n              @show=\"$refs['iconSelect'].reset()\"\n            >\n              <el-input\n                slot=\"reference\"\n                v-model=\"form.icon\"\n                placeholder=\"请选择菜单图标\"\n                readonly\n                style=\"cursor: pointer; width: 460px\"\n              >\n                <template slot=\"prepend\">\n                  <i\n                    v-if=\"form.icon && form.icon.includes('el-icon')\"\n                    :class=\"form.icon\"\n                  />\n                  <svg-icon v-else :icon-class=\"form.icon ? form.icon : ''\" />\n                </template>\n              </el-input>\n              <select-icon ref=\"iconSelect\" @selected=\"selected\" />\n            </el-popover>\n          </el-form-item>\n          <el-form-item label=\"上级菜单\" prop=\"pid\">\n            <treeselect\n              v-model=\"form.pid\"\n              :options=\"menuTree\"\n              :show-count=\"true\"\n              style=\"width: 460px\"\n              placeholder=\"选择上级菜单\"\n            />\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button type=\"text\" @click=\"doCancel\">取消</el-button>\n          <el-button\n            :loading=\"formLoading\"\n            type=\"primary\"\n            @click=\"doSubmit(form)\"\n          >确认</el-button>\n        </div>\n      </el-dialog>\n      <el-tabs v-model=\"activeName\" type=\"border-card\">\n        <el-tab-pane label=\"菜单列表\" name=\"menuList\">\n          <el-table\n            ref=\"table\"\n            v-loading=\"loading\"\n            :data=\"menuTree\"\n            row-key=\"id\"\n            :tree-props=\"{ children: 'children', hasChildren: 'hasChildren' }\"\n            style=\"width: 100%; font-size: 12px\"\n            @selection-change=\"selectionChangeHandler\"\n            @select=\"selectChange\"\n            @select-all=\"selectAllChange\"\n          >\n            <el-table-column type=\"selection\" width=\"55\" />\n            <el-table-column\n              :show-overflow-tooltip=\"true\"\n              width=\"150\"\n              prop=\"name\"\n              label=\"菜单名称\"\n            />\n            <el-table-column\n              :show-overflow-tooltip=\"true\"\n              width=\"150\"\n              prop=\"path\"\n              label=\"路由地址\"\n            />\n            <el-table-column\n              :show-overflow-tooltip=\"true\"\n              prop=\"component\"\n              width=\"150\"\n              label=\"组件路径\"\n            />\n            <el-table-column\n              prop=\"icon\"\n              label=\"菜单图标\"\n              align=\"center\"\n              width=\"80px\"\n            >\n              <template slot-scope=\"scope\">\n                <i\n                  v-if=\"scope.row.icon.includes('el-icon')\"\n                  :class=\"scope.row.icon ? scope.row.icon : ''\"\n                />\n                <svg-icon\n                  v-else\n                  :icon-class=\"scope.row.icon ? scope.row.icon : ''\"\n                />\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"sort\" align=\"center\" label=\"菜单排序\">\n              <template slot-scope=\"scope\">\n                {{ scope.row.sort }}\n              </template>\n            </el-table-column>\n            <el-table-column\n              :show-overflow-tooltip=\"true\"\n              prop=\"createTime\"\n              width=\"155\"\n              label=\"创建日期\"\n            >\n              <template slot-scope=\"scope\">\n                <span>{{ parseTime(scope.row.createTime) }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column\n              label=\"操作\"\n              width=\"160\"\n              align=\"center\"\n              fixed=\"right\"\n            >\n              <template slot-scope=\"scope\">\n                <el-button\n                  size=\"mini\"\n                  type=\"text\"\n                  round\n                  @click=\"doEdit(scope.row.id)\"\n                >编辑菜单</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport SelectIcon from '@/components/SelectIcon'\nimport { mapGetters } from 'vuex'\nimport { parseTime } from '@/utils/index'\nimport { getMenuList, getMenuById, saveMenu, deleteMenu } from '@/api/menu'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nexport default {\n  name: '菜单管理',\n  components: { SelectIcon, Treeselect },\n  data() {\n    return {\n      activeName: 'menuList',\n      showDialog: false,\n      loading: false,\n      formLoading: false,\n      form: {},\n      menus: [],\n      menuTree: [],\n      selections: [],\n      name: '',\n      createTime: null,\n      rules: {\n        name: [\n          { required: true, message: '请输入菜单名称', trigger: 'blur' }\n        ],\n        path: [\n          { required: true, message: '请输入路由地址', trigger: 'blur' }\n        ],\n        component: [\n          { required: true, message: '请输入组件路径', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'baseApi'\n    ])\n  },\n  created() {\n    var param = { name: '' }\n    getMenuList(param).then(res => {\n      if (res) {\n        this.menuTree = this.ArrayToTreeData(res)\n      }\n    })\n  },\n  methods: {\n    parseTime,\n    doQuery() {\n      this.menus = []\n      var param = { name: this.name }\n      if (this.createTime != null) {\n        param.createTimeStart = Date.parse(this.createTime[0])\n        param.createTimeEnd = Date.parse(this.createTime[1])\n      }\n      getMenuList(param).then(res => {\n        if (res) {\n          this.menus = res\n          this.menuTree = this.ArrayToTreeData(res)\n        }\n      })\n    },\n    doAdd() {\n      this.form = { icon: '' }\n      this.showDialog = true\n      this.formLoading = false\n    },\n    doSubmit(menu) {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          // 判断菜单id与父菜单id是否一样\n          if (menu.pid === undefined) {\n            menu.pid = null\n          }\n          if (menu.id && menu.id === menu.pid) {\n            this.$notify({\n              title: '上级菜单不能是自己',\n              type: 'error',\n              duration: 2500\n            })\n            return\n          }\n          // console.log(menu)\n          this.formLoading = true\n          saveMenu(menu).then(res => {\n            if (res) {\n              this.showDialog = false\n              this.$notify({\n                title: '保存成功',\n                type: 'success',\n                duration: 2500\n              })\n              this.doQuery()\n            }\n          }).catch(() => {\n            this.formLoading = false\n          })\n        }\n      })\n    },\n    doDelete() {\n      const ids = []\n      this.selections.forEach((res) => {\n        ids.push(res.id)\n      })\n      this.$confirm(`确认删除这些菜单吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() =>\n        deleteMenu(ids).then(res => {\n          if (res) {\n            this.$notify({\n              title: '删除成功',\n              type: 'success',\n              duration: 2500\n            })\n            this.doQuery()\n          }\n        })\n      ).catch(() => {\n      })\n    },\n    // 选择改变\n    selectionChangeHandler(val) {\n      this.selections = val\n    },\n    // 选择所有\n    selectAllChange(selection) {\n      // 如果选中的数目与请求到的数目相同就选中子节点，否则就清空选中\n      if (selection && selection.length === this.menuTree.length) {\n        selection.forEach(val => {\n          this.selectChange(selection, val)\n        })\n      } else {\n        this.$refs.table.clearSelection()\n      }\n    },\n    // 单个选中\n    selectChange(selection, row) {\n      // 如果selection中存在row代表是选中，否则是取消选中\n      if (selection.find(val => { return val.id === row.id })) {\n        if (row.children) {\n          row.children.forEach(val => {\n            this.$refs.table.toggleRowSelection(val, true)\n\n            // 过滤重复值\n            let i = 0\n            let exist = false\n            for (i = 0; i < selection.length; i++) {\n              if (selection[i].id === val.id) {\n                exist = true\n                break\n              }\n            }\n            if (!exist) {\n              selection.push(val)\n            }\n\n            if (val.children) {\n              this.selectChange(selection, val)\n            }\n          })\n        }\n      } else {\n        this.toggleRowSelection(selection, row)\n      }\n    },\n    // 取消选中\n    toggleRowSelection(selection, data) {\n      if (data.children) {\n        this.$nextTick(() => {\n          data.children.forEach(val => {\n            this.$refs.table.toggleRowSelection(val, false)\n            if (val.children) {\n              this.toggleRowSelection(selection, val)\n            }\n          })\n        })\n      }\n    },\n\n    doEdit(id) {\n      this.showDialog = true\n      this.formLoading = true\n      this.form = {}\n      getMenuById(id).then(res => {\n        this.form = res\n        this.formLoading = false\n      })\n    },\n    doCancel() {\n      this.showDialog = false\n      this.formLoading = true\n      this.form = {}\n    },\n    ArrayToTreeData(data) {\n      const cloneData = JSON.parse(JSON.stringify(data)) // 对源数据深度克隆\n      return cloneData.filter(father => {\n        const branchArr = cloneData.filter(child => father.id === child.pid) // 返回每一项的子级数组\n        branchArr.length > 0 ? father.children = branchArr : '' // 如果存在子级，则给父级添加一个children属性，并赋值\n        const parentArr = cloneData.filter(parent => parent.id === father.pid) // 判断该菜单的父级菜单是否存在\n        if (parentArr.length === 0) { return father } // 如果该菜单的父级菜单不存在，则直接返回该菜单\n        return father.pid === null // 返回第一层\n      })\n    },\n    // 选中图标\n    selected(name) {\n      this.form.icon = name\n    }\n  }\n}\n\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n.avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n}\n</style>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n::v-deep .el-input-number .el-input__inner {\n  text-align: left;\n}\n\n::v-deep .vue-treeselect__control,\n::v-deep .vue-treeselect__placeholder,\n::v-deep .vue-treeselect__single-value {\n  height: 30px;\n  line-height: 30px;\n}\n</style>\n"]}]}